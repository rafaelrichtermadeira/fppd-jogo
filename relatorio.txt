Relat√≥rio - Jogo Concorrente em Go

Objetivo:
Implementar novos elementos aut√¥nomos concorrentes em um jogo de terminal em Go, utilizando goroutines e canais para comunica√ß√£o e sincroniza√ß√£o.

Arquivos e responsabilidades:
- main.go: inicializa√ß√£o, cria√ß√£o de canais, loop de entrada, inicializa√ß√£o de elementos concorrentes e goroutines de aplica√ß√£o/cheque de vit√≥ria.
- interface.go: abstra√ß√£o de desenho/entrada usando termbox-go.
- jogo.go: defini√ß√£o das estruturas (Elemento, Jogo) e utilit√°rias para carregar mapa e verificar movimentos.
- elementos.go: implementa√ß√£o das goroutines aut√¥nomas (inimigo, tesouro, portais).
- personagem.go: transforma eventos do teclado em a√ß√µes enviadas via canal 'acoes'.
- relatorio.txt: este arquivo.

Elementos implementados:
1) Inimigo (‚ò†)
   - Move-se aleatoriamente a cada 1 segundo.
   - Envia "a√ß√µes" (closures) ao canal 'acoes' que s√£o aplicadas de forma exclusiva pela goroutine applier.

2) Tesouro ($)
   - Apenas 1 tesouro existe por vez.
   - Surge a cada 10s (se houver espa√ßo), permanece por at√© 5s e some automaticamente se n√£o for coletado.
   - Quando o jogador pisa sobre ele, o tesouro √© removido e um sinal de vit√≥ria √© enviado pelo canal 'victoryCh'.

3) Portais (üåÄ)
   - Implementados como um par (entrada e sa√≠da).
   - Alternam entre aberto (pass√°vel) e fechado (bloqueado) a cada 3s.
   - Ao pisar em um portal aberto o jogador √© teletransportado para o outro portal aberto.

Sincroniza√ß√£o e exclus√£o m√∫tua:
- Todas as modifica√ß√µes do estado do jogo (mapa, posi√ß√µes, mensagens) s√£o feitas somente por fun√ß√µes/closures enviadas ao canal `acoes`.
- Uma √∫nica goroutine consome `acoes` e aplica as mudan√ßas. Isso garante exclus√£o m√∫tua sem usar mutexes.
- A comunica√ß√£o entre elementos (por exemplo: tesouros tempor√°rios) √© feita atrav√©s de mensagens/closures e canais auxiliares (ex.: coords buffer para spawn).

Escuta de m√∫ltiplos canais / timeout:
- O portal alterna seu estado usando `time.Sleep` dentro de sua goroutine; o tesouro usa timeout (espera 5s antes de remover).
- Exemplos do uso de timeout: tesouro desaparece ap√≥s 5s; portais alternam periodicamente.

Observa√ß√µes finais:
- Para compilar: ter Go instalado; instalar depend√™ncia termbox-go:
   go get github.com/nsf/termbox-go
   go mod tidy
   go run .
- Rode o bin√°rio em um terminal TTY (n√£o via debug sem suporte a TTY), pois termbox precisa de um terminal real.

