RELAT√ìRIO DO JOGO CONCORRENTE EM GO

1. Introdu√ß√£o
Este trabalho implementa um jogo simples em Go, utilizando goroutines e canais
para coordenar elementos concorrentes dentro de um mapa em modo texto. O
objetivo do jogador √© alcan√ßar o tesouro sem ser pego por inimigos.

2. Elementos concorrentes
- Personagem (‚ò∫): controlado pelo jogador com WASD.
- Inimigos (‚ò†): andam aleatoriamente pelo mapa. Se encostam no jogador ‚Üí derrota.
- Tesouro ($): se move sozinho pelo mapa. Se o jogador alcan√ßa o tesouro ‚Üí vit√≥ria.
- Portais (üåÄ): abrem e fecham ciclicamente; quando abertos, permitem teletransporte.

3. Comunica√ß√£o e sincroniza√ß√£o
- Todos os elementos concorrentes utilizam o canal `acoes` (chan func(*Jogo)) para
modificar o estado do mapa de forma segura, garantindo exclus√£o m√∫tua.
- Vit√≥ria e derrota s√£o comunicadas atrav√©s dos canais `victoryCh` e `derrotaCh`.
- Os portais utilizam `time.After` para alternar entre aberto/fechado, demonstrando
uso de canais com timeout.

4. Exclus√£o m√∫tua
A exclus√£o m√∫tua √© garantida centralizando todas as altera√ß√µes de estado na goroutine
"applier", que l√™ do canal `acoes` e aplica mudan√ßas no struct `Jogo`.

5. Demonstra√ß√£o de m√∫ltiplos canais
- O personagem interage via teclado (PollEvent da termbox).
- Portais escutam tanto tempo (`time.After`) quanto mensagens for√ßadas (poderia ser
expandido).
- Vit√≥ria e derrota usam canais distintos (`victoryCh` e `derrotaCh`).

6. Conclus√£o
O jogo atende os requisitos:
- Pelo menos 3 tipos de elementos concorrentes (personagem, inimigos, tesouro,
portais).
- Comunica√ß√£o e sincroniza√ß√£o por canais.
- Exclus√£o m√∫tua garantida.
- Canal com timeout demonstrado nos portais.
- Intera√ß√µes claras (vit√≥ria ao alcan√ßar tesouro, derrota ao ser pego por inimigo).
